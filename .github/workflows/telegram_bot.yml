name: Telegram Bot Notifications

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up any existing trigger files
      run: |
        # Remove any workflow_trigger file from previous runs
        if [ -f "data/workflow_trigger" ]; then
          echo "‚ö†Ô∏è  Found old trigger file from previous run, removing..."
          rm -f data/workflow_trigger
          git rm -f data/workflow_trigger 2>/dev/null || true
        fi
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install playwright requests pyyaml asyncio
        playwright install chromium
        
    - name: Run bot
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        BASE_URL: ${{ secrets.BASE_URL }}
      run: python parser.py
      
    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'Auto-update data [skip ci]'
        file_pattern: 'data/*'
        
    - name: Check for trigger conditions
      id: check_trigger
      run: |
        echo "üîç Checking for workflow trigger file..."
        # Check if parser.py created a new trigger file
        if [ -f "data/workflow_trigger" ]; then
          echo "‚úÖ Trigger file found!"
          cat data/workflow_trigger
          echo "should_trigger=true" >> $GITHUB_OUTPUT
          echo "mode=$(grep '^mode=' data/workflow_trigger | cut -d'=' -f2)" >> $GITHUB_OUTPUT
          echo "search=$(grep '^search=' data/workflow_trigger | cut -d'=' -f2)" >> $GITHUB_OUTPUT
          echo "üìã Extracted: mode=$(grep '^mode=' data/workflow_trigger | cut -d'=' -f2), search=$(grep '^search=' data/workflow_trigger | cut -d'=' -f2)"
          rm data/workflow_trigger
        else
          echo "‚ùå No trigger file found - no changes detected"
          echo "should_trigger=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Trigger data pipeline
      if: steps.check_trigger.outputs.should_trigger == 'true'
      run: |
        echo "üöÄ Triggering data-pipeline with mode=${{ steps.check_trigger.outputs.mode }} search=${{ steps.check_trigger.outputs.search }}"
        if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
          echo "‚ùå PERSONAL_ACCESS_TOKEN not set - cannot trigger external workflow"
          exit 1
        fi
        gh workflow run data-pipeline.yml \
          --repo klimmm/rental-data-pipeline \
          --ref main \
          -f mode=${{ steps.check_trigger.outputs.mode }} \
          -f search=${{ steps.check_trigger.outputs.search }}
        echo "‚úÖ Trigger command completed successfully"
      env:
        GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}